Index: src/bundle/Resources/public/js/scripts/admin.notifications.modal.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>(function (global, doc, ibexa, Translator, Routing) {\r\n    let currentPageLink = null;\r\n    let getNotificationsStatusErrorShowed = false;\r\n    let lastFailedCountFetchNotificationNode = null;\r\n    let selectedNotificationId = null;\r\n    const SELECTOR_MODAL_ITEM = '.ibexa-notifications-modal__item';\r\n    const SELECTOR_MODAL_RESULTS = '.ibexa-notifications-modal__results .ibexa-scrollable-wrapper';\r\n    const SELECTOR_MODAL_TITLE = '.ibexa-side-panel__header';\r\n    const SELECTOR_LIST = '.ibexa-list--notifications';\r\n    const CLASS_MODAL_LOADING = 'ibexa-notifications-modal--loading';\r\n    const INTERVAL = 30000;\r\n    const panel = doc.querySelector('.ibexa-notifications-modal');\r\n    const { showErrorNotification, showWarningNotification } = ibexa.helpers.notification;\r\n    const { getJsonFromResponse, getTextFromResponse } = ibexa.helpers.request;\r\n    const handleNotificationClickRequest = (notification, response) => {\r\n        if (response.status === 'success') {\r\n            notification.classList.add('ibexa-notifications-modal__item--read');\r\n        }\r\n\r\n        if (response.redirect) {\r\n            global.location = response.redirect;\r\n        }\r\n    };\r\n    const handleNotificationClick = (notification) => {\r\n        const notificationReadLink = notification.dataset.notificationRead;\r\n        const request = new Request(notificationReadLink, {\r\n            mode: 'cors',\r\n            credentials: 'same-origin',\r\n        });\r\n\r\n        fetch(request).then(getJsonFromResponse).then(handleNotificationClickRequest.bind(null, notification)).catch(showErrorNotification);\r\n    };\r\n\r\n    const getNotificationsStatus = () => {\r\n        const notificationsTable = panel.querySelector(SELECTOR_LIST);\r\n        const notificationsStatusLink = notificationsTable.dataset.notificationsCount;\r\n        const request = new Request(notificationsStatusLink, {\r\n            mode: 'cors',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'X-Requested-With': 'XMLHttpRequest',\r\n            },\r\n        });\r\n\r\n        return fetch(request)\r\n            .then(getJsonFromResponse)\r\n            .then((notificationsInfo) => {\r\n                setPendingNotificationCount(notificationsInfo);\r\n                updateModalTitleTotalInfo(notificationsInfo.total);\r\n                getNotificationsStatusErrorShowed = false;\r\n            })\r\n            .catch(onGetNotificationsStatusFailure);\r\n    };\r\n    const onGetNotificationsStatusFailure = (error) => {\r\n        if (lastFailedCountFetchNotificationNode && doc.contains(lastFailedCountFetchNotificationNode)) {\r\n            return;\r\n        }\r\n\r\n        if (!getNotificationsStatusErrorShowed) {\r\n            const message = Translator.trans(\r\n                /* @Desc(\"Cannot update notifications\") */ 'notifications.modal.message.error',\r\n                { error: error.message },\r\n                'ibexa_notifications',\r\n            );\r\n\r\n            showWarningNotification(message, (notificationNode) => {\r\n                lastFailedCountFetchNotificationNode = notificationNode;\r\n            });\r\n        }\r\n\r\n        getNotificationsStatusErrorShowed = true;\r\n    };\r\n    const updateModalTitleTotalInfo = (notificationsCount) => {\r\n        const modalTitle = panel.querySelector(SELECTOR_MODAL_TITLE);\r\n        const modalFooter = panel.querySelector('.ibexa-notifications-modal__view-all-btn--count');\r\n\r\n        modalFooter.textContent = ` (${notificationsCount})`;\r\n        modalTitle.dataset.notificationsTotal = `(${notificationsCount})`;\r\n\r\n        if (notificationsCount < 10) {\r\n            panel.querySelector('.ibexa-notifications-modal__count').textContent = `(${notificationsCount})`;\r\n        }\r\n    };\r\n    const updatePendingNotificationsView = (notificationsInfo) => {\r\n        const noticeDot = doc.querySelector('.ibexa-header-user-menu__notice-dot');\r\n\r\n        noticeDot.dataset.count = notificationsInfo.pending;\r\n        noticeDot.classList.toggle('ibexa-header-user-menu__notice-dot--no-notice', notificationsInfo.pending === 0);\r\n    };\r\n    const setPendingNotificationCount = (notificationsInfo) => {\r\n        updatePendingNotificationsView(notificationsInfo);\r\n\r\n        const notificationsTable = panel.querySelector(SELECTOR_LIST);\r\n        const notificationsTotal = notificationsInfo.total;\r\n        const notificationsTotalOld = parseInt(notificationsTable.dataset.notificationsTotal, 10);\r\n\r\n        markAllAsReadBtn.disabled = notificationsInfo.pending === 0;\r\n\r\n        if (notificationsTotal !== notificationsTotalOld) {\r\n            notificationsTable.dataset.notificationsTotal = notificationsTotal;\r\n\r\n            fetchNotificationPage(currentPageLink);\r\n        }\r\n    };\r\n    const markAllAsRead = () => {\r\n        const markAllAsReadLink = Routing.generate('ibexa.notifications.mark_all_as_read');\r\n        const message = Translator.trans(\r\n            /* @Desc(\"Cannot mark all notifications as read\") */ 'notifications.modal.message.error.mark_all_as_read',\r\n            {},\r\n            'ibexa_notifications',\r\n        );\r\n\r\n        fetch(markAllAsReadLink, { mode: 'same-origin', credentials: 'same-origin' })\r\n            .then(getJsonFromResponse)\r\n            .then((response) => {\r\n                if (response.status === 'success') {\r\n                    const allUnreadNotifications = doc.querySelectorAll('.ibexa-notifications-modal__item');\r\n\r\n                    allUnreadNotifications.forEach((notification) => notification.classList.add('ibexa-notifications-modal__item--read'));\r\n                    getNotificationsStatus();\r\n                    const actions = doc.querySelectorAll('.ibexa-notifications-modal--mark-as-read');\r\n                    const markAsUnreadLabel = Translator.trans(\r\n                        /* @Desc(\"Mark as unread\") */ 'notification.mark_as_unread',\r\n                        {},\r\n                        'ibexa_notifications',\r\n                    );\r\n\r\n                    actions.forEach((notification) => {\r\n                        notification.classList.remove('ibexa-notifications-modal--mark-as-read');\r\n                        notification.classList.add('ibexa-notifications-modal--mark-as-unread');\r\n                        notification.textContent = markAsUnreadLabel;\r\n                    });\r\n                } else {\r\n                    showErrorNotification(message);\r\n                }\r\n            })\r\n            .catch(() => {\r\n                showErrorNotification(message);\r\n            });\r\n    };\r\n    const markAsRead = ({ currentTarget }) => {\r\n        const { notificationId } = currentTarget.dataset;\r\n        const markAsReadLink = Routing.generate('ibexa.notifications.mark_as_read', { notificationId });\r\n        const message = Translator.trans(\r\n            /* @Desc(\"Cannot mark notification as read\") */ 'notifications.modal.message.error.mark_as_read',\r\n            {},\r\n            'ibexa_notifications',\r\n        );\r\n\r\n        fetch(markAsReadLink, { mode: 'same-origin', credentials: 'same-origin' })\r\n            .then(getJsonFromResponse)\r\n            .then((response) => {\r\n                if (response.status === 'success') {\r\n                    const notification = doc.querySelector(`.ibexa-notifications-modal__item[data-notification-id=\"${notificationId}\"]`);\r\n                    const menuBranch = currentTarget.closest('.ibexa-multilevel-popup-menu__branch');\r\n                    const menuInstance = ibexa.helpers.objectInstances.getInstance(menuBranch.menuInstanceElement);\r\n                    const markAsUnreadLabel = Translator.trans(\r\n                        /* @Desc(\"Mark as unread\") */ 'notification.mark_as_unread',\r\n                        {},\r\n                        'ibexa_notifications',\r\n                    );\r\n\r\n                    menuInstance.closeMenu();\r\n                    notification.classList.add('ibexa-notifications-modal__item--read');\r\n                    currentTarget.classList.remove('ibexa-notifications-modal--mark-as-read');\r\n                    currentTarget.classList.add('ibexa-notifications-modal--mark-as-unread');\r\n                    currentTarget.textContent = markAsUnreadLabel;\r\n                    getNotificationsStatus();\r\n                } else {\r\n                    showErrorNotification(message);\r\n                }\r\n            })\r\n            .catch(() => {\r\n                showErrorNotification(message);\r\n            });\r\n    };\r\n    const markAsUnread = ({ currentTarget }) => {\r\n        const { notificationId } = currentTarget.dataset;\r\n        const markAsUnreadLink = Routing.generate('ibexa.notifications.mark_as_unread', { notificationId });\r\n        const message = Translator.trans(\r\n            /* @Desc(\"Cannot mark notification as unread\") */ 'notifications.modal.message.error.mark_as_unread',\r\n            {},\r\n            'ibexa_notifications',\r\n        );\r\n\r\n        fetch(markAsUnreadLink, { mode: 'same-origin', credentials: 'same-origin' })\r\n            .then(getJsonFromResponse)\r\n            .then((response) => {\r\n                if (response.status === 'success') {\r\n                    const notification = doc.querySelector(`.ibexa-notifications-modal__item[data-notification-id=\"${notificationId}\"]`);\r\n                    const menuBranch = currentTarget.closest('.ibexa-multilevel-popup-menu__branch');\r\n                    const menuInstance = ibexa.helpers.objectInstances.getInstance(menuBranch.menuInstanceElement);\r\n                    const markAsReadLabel = Translator.trans(\r\n                        /* @Desc(\"Mark as read\") */ 'notification.mark_as_read',\r\n                        {},\r\n                        'ibexa_notifications',\r\n                    );\r\n\r\n                    menuInstance.closeMenu();\r\n                    notification.classList.remove('ibexa-notifications-modal__item--read');\r\n                    currentTarget.classList.remove('ibexa-notifications-modal--mark-as-unread');\r\n                    currentTarget.classList.add('ibexa-notifications-modal--mark-as-read');\r\n                    currentTarget.textContent = markAsReadLabel;\r\n                    getNotificationsStatus();\r\n                } else {\r\n                    showErrorNotification(message);\r\n                }\r\n            })\r\n            .catch(() => {\r\n                showErrorNotification(message);\r\n            });\r\n    };\r\n    const handleMarkAsAction = ({ currentTarget }) => {\r\n        const markAsReadLabel = Translator.trans(/* @Desc(\"Mark as read\") */ 'notification.mark_as_read', {}, 'ibexa_notifications');\r\n\r\n        currentTarget.textContent.trim() === markAsReadLabel ? markAsRead({ currentTarget }) : markAsUnread({ currentTarget });\r\n    };\r\n    const deleteNotification = () => {\r\n        const deleteLink = Routing.generate('ibexa.notifications.delete', { notificationId: selectedNotificationId });\r\n        const message = Translator.trans(\r\n            /* @Desc(\"Cannot delete notification\") */ 'notifications.modal.message.error.delete',\r\n            {},\r\n            'ibexa_notifications',\r\n        );\r\n\r\n        fetch(deleteLink, { method: 'POST', mode: 'same-origin', credentials: 'same-origin' })\r\n            .then(getJsonFromResponse)\r\n            .then((response) => {\r\n                if (response.status === 'success') {\r\n                    const notification = doc.querySelector(\r\n                        `.ibexa-notifications-modal__item[data-notification-id=\"${selectedNotificationId}\"]`,\r\n                    );\r\n\r\n                    notification.remove();\r\n                    getNotificationsStatus();\r\n                } else {\r\n                    showErrorNotification(message);\r\n                }\r\n            })\r\n            .catch(() => {\r\n                showErrorNotification(message);\r\n            });\r\n    };\r\n    const attachActionsListeners = () => {\r\n        const attachListener = (node, callback) => node.addEventListener('click', callback, false);\r\n        const markAsButtons = doc.querySelectorAll('.ibexa-notifications-modal--mark-as');\r\n        const deleteButtons = doc.querySelectorAll('.ibexa-notifications-open-modal-button');\r\n        const deleteButton = doc.querySelector('.ibexa-notifications-modal--delete--confirm');\r\n\r\n        const setNotificationId = ({ currentTarget }) => {\r\n            selectedNotificationId = currentTarget.dataset.notificationId;\r\n        };\r\n\r\n        markAsButtons.forEach((markAsButton) => {\r\n            attachListener(markAsButton, handleMarkAsAction);\r\n        });\r\n\r\n        deleteButtons.forEach((deleteButton) => {\r\n            attachListener(deleteButton, setNotificationId);\r\n        });\r\n\r\n        if (deleteButton) {\r\n            deleteButton.addEventListener('click', deleteNotification);\r\n        }\r\n    };\r\n    const showNotificationPage = (pageHtml) => {\r\n        const modalResults = panel.querySelector(SELECTOR_MODAL_RESULTS);\r\n\r\n        modalResults.innerHTML = pageHtml;\r\n        toggleLoading(false);\r\n        attachActionsListeners();\r\n\r\n        doc.body.dispatchEvent(\r\n            new CustomEvent('ibexa-multilevel-popup-menu:init', {\r\n                detail: { container: modalResults },\r\n            }),\r\n        );\r\n    };\r\n    const toggleLoading = (show) => {\r\n        panel.classList.toggle(CLASS_MODAL_LOADING, show);\r\n    };\r\n    const fetchNotificationPage = (link) => {\r\n        if (!link) {\r\n            return;\r\n        }\r\n\r\n        const request = new Request(link, {\r\n            method: 'GET',\r\n            headers: {\r\n                Accept: 'text/html',\r\n            },\r\n            credentials: 'same-origin',\r\n            mode: 'cors',\r\n        });\r\n\r\n        currentPageLink = link;\r\n        toggleLoading(true);\r\n        fetch(request).then(getTextFromResponse).then(showNotificationPage).catch(showErrorNotification);\r\n    };\r\n    const handleModalResultsClick = (event) => {\r\n        const isActionBtn = event.target.closest('.ibexa-notifications-modal__actions');\r\n        const notification = event.target.closest(SELECTOR_MODAL_ITEM);\r\n\r\n        if (isActionBtn || !notification) {\r\n            return;\r\n        }\r\n\r\n        handleNotificationClick(notification);\r\n    };\r\n\r\n    if (!panel) {\r\n        return;\r\n    }\r\n    const markAllAsReadBtn = panel.querySelector('.ibexa-notifications-modal__mark-all-read-btn');\r\n    const notificationsTable = panel.querySelector(SELECTOR_LIST);\r\n    currentPageLink = notificationsTable.dataset.notifications;\r\n    const interval = Number.parseInt(notificationsTable.dataset.notificationsCountInterval, 10) || INTERVAL;\r\n\r\n    panel.querySelectorAll(SELECTOR_MODAL_RESULTS).forEach((link) => link.addEventListener('click', handleModalResultsClick, false));\r\n    markAllAsReadBtn.addEventListener('click', markAllAsRead, false);\r\n\r\n    const getNotificationsStatusLoop = () => {\r\n        getNotificationsStatus().finally(() => {\r\n            global.setTimeout(getNotificationsStatusLoop, interval);\r\n        });\r\n    };\r\n\r\n    getNotificationsStatusLoop();\r\n    attachActionsListeners();\r\n})(window, window.document, window.ibexa, window.Translator, window.Routing);\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/bundle/Resources/public/js/scripts/admin.notifications.modal.js b/src/bundle/Resources/public/js/scripts/admin.notifications.modal.js
--- a/src/bundle/Resources/public/js/scripts/admin.notifications.modal.js	(revision 488450555956cce9eb0f69ca197f6f268f9bf827)
+++ b/src/bundle/Resources/public/js/scripts/admin.notifications.modal.js	(date 1758712000972)
@@ -227,9 +227,7 @@
             .then(getJsonFromResponse)
             .then((response) => {
                 if (response.status === 'success') {
-                    const notification = doc.querySelector(
-                        `.ibexa-notifications-modal__item[data-notification-id="${selectedNotificationId}"]`,
-                    );
+                    const notification = doc.querySelector(`.ibexa-notifications-modal__item[data-notification-id="${selectedNotificationId}"]`);
 
                     notification.remove();
                     getNotificationsStatus();
@@ -245,7 +243,7 @@
         const attachListener = (node, callback) => node.addEventListener('click', callback, false);
         const markAsButtons = doc.querySelectorAll('.ibexa-notifications-modal--mark-as');
         const deleteButtons = doc.querySelectorAll('.ibexa-notifications-open-modal-button');
-        const deleteButton = doc.querySelector('.ibexa-notifications-modal--delete--confirm');
+        const confirmDeleteButton = doc.querySelector('.ibexa-notifications-modal--delete--confirm');
 
         const setNotificationId = ({ currentTarget }) => {
             selectedNotificationId = currentTarget.dataset.notificationId;
@@ -259,8 +257,8 @@
             attachListener(deleteButton, setNotificationId);
         });
 
-        if (deleteButton) {
-            deleteButton.addEventListener('click', deleteNotification);
+        if (confirmDeleteButton) {
+            confirmDeleteButton.addEventListener('click', deleteNotification);
         }
     };
     const showNotificationPage = (pageHtml) => {
